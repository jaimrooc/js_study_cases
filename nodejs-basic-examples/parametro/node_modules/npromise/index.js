/**
 * Created by schwarzkopfb on 15/1/7.
 */

var assert       = require('assert'),
    EventEmitter = require('events').EventEmitter

if(!('Promise' in global))
    try {
        global.Promise = require('promise')
    }
    catch(ex) {
        throw new Error("For versions of Node under 0.11 you must 'npm install promise' or include an other Promise polyfill.")
    }

global.NodePromise = global.NPromise = NodePromise

require('util').inherits(NodePromise, EventEmitter)

function NodePromise(fn) {
    EventEmitter.call(this)

    var self    = this,
        promise = new Promise(fn)

    Object.defineProperty(this, '_native', {
        get: function () {
            return promise
        }
    })

    promise.then(
        function (result) {
            self.emit('resolved', result)
        },
        function (error) {
            error = error instanceof Error ? error : new Error(error)

            self.emit('rejected', error)
            self.emit('error',    error)
        }
    )
}

function noop() { }

Object.defineProperties(NodePromise.prototype, {
    then: {
        value: function () {
            if(arguments.length > 1)
                this.on('error', noop)

            this._native.then.apply(this._native, arguments)
            return this
        }
    },

    catch: {
        value: function () {
            if(arguments.length)
                this.on('error', noop)

            this._native.catch.apply(this._native, arguments)
            return this
        }
    },

    done: {
        value: function (callback) {
            assert(callback instanceof Function, 'NodePromise.done() requires a callback function.')

            return this.then(
                function (res) {
                    callback(null, res)
                },
                callback
            )
        }
    }
})

module.exports = NodePromise